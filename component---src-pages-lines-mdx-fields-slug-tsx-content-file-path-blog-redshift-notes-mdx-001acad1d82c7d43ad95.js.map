{"version":3,"file":"component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-redshift-notes-mdx-001acad1d82c7d43ad95.js","mappings":"sKACO,IAAIA,EAAO,4BACPC,EAAO,2B,sEC+BX,MAAMC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,C,4FC3EA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,OAAQ,SACRC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBd,EAAMH,YAC/B,OAAOkB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,wKAAyKW,EAAAA,cAAoBd,EAAYI,EAAG,CACpSW,KAAM,sBACL,gBAAiB,KAAM,KAAMD,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,YAAa,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,eAAiBO,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,KAAO,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYS,OAAQ,KAAM,cAAe,oDAAqDK,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,0JAA2J,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYS,OAAQ,KAAM,SAAU,sCAAuCK,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,oDAAqD,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,2BAA4BW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,UAAW,KAAM,KAAMM,EAAAA,cAAoB,QAAS,CAC7hCE,OAAQ,EACRC,MAAO,WACNH,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,MAAOA,EAAAA,cAAoB,KAAM,KAAM,eAAgBA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,MAAOA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,MAAOA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,OAAQ,KAAMA,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,qEAAsEW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,UAAW,gDAAiDM,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,aAAc,WAAY,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,2PAA4PW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,WAAY,iCAAkC,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,wBAAyB,KAAMW,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYQ,KAAM,CACvwCU,UAAW,gBACV,0GAA2G,KAAMJ,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,6DAA8DW,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,QAAS,gBAAiBG,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,cAAe,qJAAsJM,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,eAAgB,wEAAyEM,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,qFAAsF,KAAMM,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,4GAA6GW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,KAAM,KAAMM,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYQ,KAAM,CACpjCU,UAAW,gBACV,+KAAgL,KAAMJ,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,+CAAgDW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,4DAA6D,KAAMM,EAAAA,cAAoBd,EAAYY,GAAI,KAAM,4BAA6B,KAAME,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,uHAAwH,KAAMW,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYQ,KAAM,CACjtBU,UAAW,gBACV,8OAA+O,KAAMJ,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,kLAAmL,KAAMW,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,uCAAwCW,EAAAA,cAAoBd,EAAYQ,KAAM,KAAM,YAAa,oMAAqM,KAAMM,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,iBAAkB,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,kBAAmB,KAAMO,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYQ,KAAM,CACngCU,UAAW,gBACV,2zBAA4zB,KAAMJ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,oBAAqB,KAAMO,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYQ,KAAM,CACz9BU,UAAW,gBACV,iXACL,CAKA,MAJA,SAAoBnB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOoB,QAASC,GAAanB,OAAOC,OAAO,CAAC,GAAGW,EAAAA,EAAAA,MAAsBd,EAAMH,YAC3E,OAAOwB,EAAYN,EAAAA,cAAoBM,EAAWrB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBChCA,MAAMsB,EAAOC,IACX,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOR,EAAAA,cAAoBW,EAAAA,EAAQ,KAAMX,EAAAA,cAAoB,IAAK,CAChEI,UAAW1B,EAAAA,IACVsB,EAAAA,cAAoB,IAAK,KAAMS,EAAKG,IAAIC,YAAYnC,MAAOsB,EAAAA,cAAoB,KAAM,MAAOS,EAAKG,IAAIC,YAAYC,SAAWd,EAAAA,cAAoB,IAAK,KAAM,eAAgBS,EAAKG,IAAIC,YAAYC,QAAS,MAAOd,EAAAA,cAAoB,MAAO,CAC5OI,UAAWzB,EAAAA,IACV+B,KAIU,SAASK,EAAiB9B,GACvC,OAAOe,EAAAA,cAAoBO,EAAMtB,EAAOe,EAAAA,cAAoBgB,EAAqB/B,GACnF,C","sources":["webpack://steebe.dev/./src/pages/lines/lines.module.css","webpack://steebe.dev/./node_modules/@mdx-js/react/lib/index.js","webpack://steebe.dev/./blog/redshift-notes.mdx","webpack://steebe.dev/./src/pages/lines/{mdx.fields__slug}.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var date = \"lines-module--date--99f4f\";\nexport var post = \"lines-module--post--c3f31\";\nexport var previewContainer = \"lines-module--preview-container--8a704\";\nexport var threeColumn = \"lines-module--three-column--f948c\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    hr: \"hr\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    em: \"em\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Below are helpful commands I don't want to forget for Redshift admin and use. Those interested in a small torching\\nof Redshift as a product are welcome to read the \", React.createElement(_components.a, {\n    href: \"./redshift-opinion\"\n  }, \"sibling post\"), \".\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Querying\"), \"\\n\", React.createElement(_components.h3, null, \"A Distinct \\\"\", React.createElement(_components.code, null, \"DISTINCT\"), \"\\\"\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"PostgreSQL\"), \" users might be familiar with the ability to use \", React.createElement(_components.code, null, \"DISTINCT\"), \" as an expression evaluator, rather\\nthan a clause, to reduce the result set down to records that only include the value evaluated by the\\nexpression.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"MySQL\"), \" users might be used to leveraging \", React.createElement(_components.code, null, \"GROUP BY\"), \" in a different way than normal\\nto do the same.\"), \"\\n\", React.createElement(_components.p, null, \"I.E: if I have a table, \", React.createElement(_components.code, null, \"orders\"), \":\"), \"\\n\", React.createElement(\"table\", {\n    border: 1,\n    frame: \"outside\"\n  }, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"id\"), React.createElement(\"th\", null, \"customerId\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"1\"), React.createElement(\"td\", null, \"1\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"2\"), React.createElement(\"td\", null, \"1\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"3\"), React.createElement(\"td\", null, \"1\"))), \"\\n\", React.createElement(_components.p, null, \"Our first customer was keeping the lights on, and proved that the \", React.createElement(_components.code, null, \"orders\"), \" table has a many:one\\nrelationship with the \", React.createElement(_components.code, null, \"customers\"), \" table.\"), \"\\n\", React.createElement(_components.p, null, \"Suppose we need to pull the latest order for each customer, in a world where there is not just\\na sole customer placing orders. Additionally, the context of the report involves many other fields are being\\naggregated across dozens of other tables. \", React.createElement(_components.code, null, \"LIMIT 1\"), \" is not coming to the rescue.\"), \"\\n\", React.createElement(_components.p, null, \"Postgres allows for:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT\\n    DISTINCT ON(customerId) customerId,\\n    id\\nFROM orders\\nORDER BY customerId, id DESC;\\n\")), \"\\n\", React.createElement(_components.p, null, \"Okay, cool. Weird, but cool. The developer specifies they \", React.createElement(_components.em, null, \"only\"), \" want unique \", React.createElement(_components.code, null, \"customerId\"), \" values\\nin their results, but want the respective order information along with it. Postgres constructs\\ngroups based on the argument provided to \", React.createElement(_components.code, null, \"DISTINCT ON\"), \", then omits any records that break the unique\\nvalue specified. The \", React.createElement(_components.code, null, \"ORDER BY\"), \" gives the developer control over precedence on which distinct records\\nto honor.\"), \"\\n\", React.createElement(_components.p, null, \"MySQL perhaps helps visualize this better, literally making the developer create the groups themselves:\\n\", React.createElement(_components.code, null, \"ORDER BY\"), \":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"WITH disctinct_customer_id_orders AS (\\n    SELECT\\n        id\\n    FROM orders\\n    GROUP BY customerId\\n)\\nSELECT * FROM distinct_customer_id_orders ORDER BY id DESC;\\n\")), \"\\n\", React.createElement(_components.p, null, \"It's still not perfect, either, because the \", React.createElement(_components.code, null, \"ORDER BY\"), \" should happen in the first query, but hey, MySQL tries.\"), \"\\n\", React.createElement(_components.h4, null, \"Redshift does neither...\"), \"\\n\", React.createElement(_components.p, null, \"...yet I don't hate how Redshift achieves the same outcome, strictly from the developer\\nexperience side of things:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT\\n    *\\nFROM (\\n    SELECT\\n        id,\\n        customerId,\\n        RANK() OVER (PARTITION BY customerId ORDER BY id DESC) AS customer_id_rank\\n    FROM orders\\n) as ranked_orders\\nWHERE ranked_orders.customer_id_rank = 1;\\n\")), \"\\n\", React.createElement(_components.p, null, \"Where Redshift could have continued reinventing an already finished, rehashed,\\nre-spoked wheel of relational-algebra powered query engines, it instead took the modest route.\"), \"\\n\", React.createElement(_components.p, null, \"The developer is welcome to rewrite \", React.createElement(_components.code, null, \"GROUP BY\"), \" on Amazon's behalf. Also, the developer gets a bonus\\ncolumn in their toolkit to play with. It's okay that the result set grew though, because it's powered\\nby a warehouse meant for Big Data!\"), \"\\n\", React.createElement(_components.h2, null, \"Administering\"), \"\\n\", React.createElement(_components.h3, null, \"Groups & Users\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- Create groups\\nCREATE GROUP MY_GROUP [WITH USER (user1, user2,...)];\\n\\n-- View all user groups (as cluster admin)\\nSELECT * from PG_GROUP;\\n\\n-- View all users in a group\\nSELECT usename FROM pg_user, pg_group\\nWHERE pg_user.usesysid = ANY(pg_group.grolist)\\n  AND pg_group.groname = '<group-name>';\\n\\n-- Apply to entire schema\\nGRANT ALL ON SCHEMA my_schema TO GROUP my_group;\\n\\n-- Apply to specific tables\\nGRANT SELECT ON TABLE my_table TO my_user;\\n\\n-- Apply read-only access to specific (or all) tables in a single schema\\nGRANT SELECT ON ALL TABLES IN SCHEMA my_schema TO my_user;\\n\\n-- Create user\\nCREATE USER my_user PASSWORD '<pass-string>';\\n\\n-- Create user under specific group\\nCREATE USER my_user IN GROUP my_group PASSWORD 'pass';\\n\\n-- Alter existing user\\nALTER USER my_user PASSWORD 'new-pass';\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Cluster Metadata\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"-- View tables within a Schema\\nselect distinct tablename from pg_table_def where schemaname = '<schema-name>';\\n\\n-- View all schemas in a cluster\\nselect * from pg_namespace;\\n\\n-- View connection activity within a cluster\\nselect * from stl_connection_log\\nwhere recordtime > '2021-02-07 00:00:00' and username in ('user1', 'user2')\\norder by recordtime DESC;\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/steebe.github.io/steebe.github.io/blog/redshift-notes.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport {post, date} from \"./lines.module.css\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"p\", {\n    className: date\n  }, React.createElement(\"i\", null, data.mdx.frontmatter.date), React.createElement(\"br\", null), data.mdx.frontmatter.updated && React.createElement(\"i\", null, \"(Updated on \", data.mdx.frontmatter.updated, \")\")), React.createElement(\"div\", {\n    className: post\n  }, children));\n};\nconst query = \"2624043382\";\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["date","post","MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","a","hr","h2","h3","code","strong","pre","em","h4","_provideComponents","React","href","border","frame","className","wrapper","MDXLayout","Post","_ref","data","children","Layout","mdx","frontmatter","updated","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}