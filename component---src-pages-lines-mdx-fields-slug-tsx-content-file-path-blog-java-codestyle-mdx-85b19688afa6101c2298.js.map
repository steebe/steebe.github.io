{"version":3,"file":"component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-java-codestyle-mdx-85b19688afa6101c2298.js","mappings":"sKACO,IAAIA,EAAO,4BACPC,EAAO,2B,4FCClB,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,qBAAsB,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,iBAAkB,KAAMK,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACrUI,UAAW,gBACV,0iDACL,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCbA,MAAMc,EAAOC,IACX,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOL,EAAAA,cAAoBQ,EAAAA,EAAQ,KAAMR,EAAAA,cAAoB,IAAK,CAChEC,UAAWd,EAAAA,IACVa,EAAAA,cAAoB,IAAK,KAAMM,EAAKG,IAAIC,YAAYvB,MAAOa,EAAAA,cAAoB,KAAM,MAAOM,EAAKG,IAAIC,YAAYC,SAAWX,EAAAA,cAAoB,IAAK,KAAM,eAAgBM,EAAKG,IAAIC,YAAYC,QAAS,MAAOX,EAAAA,cAAoB,MAAO,CAC5OC,UAAWb,EAAAA,IACVmB,KAIU,SAASK,EAAiBtB,GACvC,OAAOU,EAAAA,cAAoBI,EAAMd,EAAOU,EAAAA,cAAoBa,EAAqBvB,GACnF,C,sECiBO,MAAMwB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,C","sources":["webpack://steebe.dev/./src/pages/lines/lines.module.css","webpack://steebe.dev/./blog/java-codestyle.mdx","webpack://steebe.dev/./src/pages/lines/{mdx.fields__slug}.tsx","webpack://steebe.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var date = \"lines-module--date--99f4f\";\nexport var post = \"lines-module--post--c3f31\";\nexport var previewContainer = \"lines-module--preview-container--8a704\";\nexport var threeColumn = \"lines-module--three-column--f948c\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"All Hail the Repo\"), \"\\n\", React.createElement(_components.h2, null, \"Style & Smell\"), \"\\n\", React.createElement(_components.h2, null, \"Coverage\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-xml\"\n  }, \"<!-- Code Coverage -->\\n<plugin>\\n  <groupId>org.jacoco</groupId>\\n  <artifactId>jacoco-maven-plugin</artifactId>\\n  <version>0.8.5-SNAPSHOT</version>\\n  <executions>\\n    <!-- Establishes target/site/ -->\\n    <execution>\\n        <id>prepare-agent</id>\\n        <goals>\\n            <goal>prepare-agent</goal>\\n        </goals>\\n    </execution>\\n\\n    <!-- Publishes coverage report to target/site/ -->\\n    <execution>\\n        <id>report</id>\\n        <phase>test</phase>\\n        <goals>\\n            <goal>report</goal>\\n        </goals>\\n    </execution>\\n\\n    <!--\\n    Ensures the coverage is of a certain threshold during the verify lifecycle\\n    https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html\\n    -->\\n    <execution>\\n      <id>check</id>\\n      <goals>\\n        <goal>check</goal>\\n      </goals>\\n      <configuration>\\n        <rules>\\n          <rule>\\n            <element>PACKAGE</element>\\n            <includes>\\n              <include>me.stevebass.rootpackage.**</include>\\n            </includes>\\n            <limits>\\n              <limit>\\n                <counter>LINE</counter>\\n                <value>COVEREDRATIO</value>\\n                <minimum>0.80</minimum>\\n              </limit>\\n            </limits>\\n          </rule>\\n        </rules>\\n      </configuration>\\n    </execution>\\n  </executions>\\n\\n  <!-- Global config for all JaCoCo behavior -->\\n  <configuration>\\n    <excludes>\\n      <exclude>**/*MyMainClass.java</exclude>\\n    </excludes>\\n  </configuration>\\n</plugin>\\n</plugins>\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/steebe.github.io/steebe.github.io/blog/java-codestyle.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport {post, date} from \"./lines.module.css\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"p\", {\n    className: date\n  }, React.createElement(\"i\", null, data.mdx.frontmatter.date), React.createElement(\"br\", null), data.mdx.frontmatter.updated && React.createElement(\"i\", null, \"(Updated on \", data.mdx.frontmatter.updated, \")\")), React.createElement(\"div\", {\n    className: post\n  }, children));\n};\nconst query = \"2624043382\";\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["date","post","_createMdxContent","props","_components","Object","assign","h1","h2","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","Post","_ref","data","children","Layout","mdx","frontmatter","updated","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}