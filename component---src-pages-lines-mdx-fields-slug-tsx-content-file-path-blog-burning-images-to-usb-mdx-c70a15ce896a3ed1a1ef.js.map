{"version":3,"file":"component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-burning-images-to-usb-mdx-c70a15ce896a3ed1a1ef.js","mappings":"kLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,8BAA+B,KAAMQ,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,oHAAqH,KAAMO,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,KAAMM,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,kEAAmE,KAAMK,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,uEAAwE,MAAO,KAAMK,EAAAA,cAAoBX,EAAYO,IAAK,KAAMI,EAAAA,cAAoBX,EAAYQ,KAAM,CACrpBI,UAAW,iBACV,yhBAA0hB,KAAMD,EAAAA,cAAoBX,EAAYK,GAAI,CACrkBQ,MAAO,KACN,KAAMF,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,6IAA8I,MACnM,CAKA,MAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWhB,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCjBA,MAAMiB,EAAOC,IACX,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAON,EAAAA,cAAoBS,EAAAA,EAAQ,KAAMT,EAAAA,cAAoB,IAAK,CAChEC,UAAWS,EAAAA,IACVV,EAAAA,cAAoB,IAAK,KAAMO,EAAKI,IAAIC,YAAYF,MAAOV,EAAAA,cAAoB,KAAM,MAAOO,EAAKI,IAAIC,YAAYC,SAAWb,EAAAA,cAAoB,IAAK,KAAM,eAAgBO,EAAKI,IAAIC,YAAYC,QAAS,MAAOb,EAAAA,cAAoB,MAAO,CAC5OC,UAAWa,EAAAA,IACVN,KAIU,SAASO,EAAiB3B,GACvC,OAAOY,EAAAA,cAAoBK,EAAMjB,EAAOY,EAAAA,cAAoBgB,EAAqB5B,GACnF,C,gFCfO,IAAIsB,EAAO,4BACPI,EAAO,2B,sEC+BX,MAAMG,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBnB,GAC/B,MAAMoB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAflB,EACFA,EAAWoB,GAGb,IAAIA,KAAsBpB,IAChC,CAACoB,EAAmBpB,GACzB,C","sources":["webpack://steebe.dev/./blog/burning-images-to-usb.mdx","webpack://steebe.dev/./src/pages/lines/{mdx.fields__slug}.tsx","webpack://steebe.dev/./src/pages/lines/lines.module.css","webpack://steebe.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Become the Trogdor of ISOs\"), \"\\n\", React.createElement(_components.p, null, \"On MacOS, there exist a few darwin executables that come in handy in regards to\\nmaking external disks bootable.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Download an image you want to install to another local machine\"), \"\\n\", React.createElement(_components.li, null, \"Follow these steps within your favorite MacOS terminal application:\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ hdiutil convert -format UDRW -o /path/to/target.img /path/to/source.iso\\n$ man hdiutil # Since you probably don't know what you just did...\\n$ mv /path/to/target.img.dmg /path/to/target.img\\n$ # Seems dumb, because it is. MacOS appends .dmg to the target image.\\n$ # Insert your USB drive now!\\n$ diskutil list\\n$ sudo dd if=/path/to/converted.img of=/dev/rdiskN bs=1m\\n$ # Wait for an annoyingly arbitrary amount of time.\\n$ diskutil eject /dev/diskN\\n$ # Actually super important. Ignore any warnings that MacOS throws at you.\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Plug it into the machine you want to ~~brick~~ install the image to and boot up in that one mode that lets you mess around with the BIOS!\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/steebe.github.io/steebe.github.io/blog/burning-images-to-usb.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport {post, date} from \"./lines.module.css\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"p\", {\n    className: date\n  }, React.createElement(\"i\", null, data.mdx.frontmatter.date), React.createElement(\"br\", null), data.mdx.frontmatter.updated && React.createElement(\"i\", null, \"(Updated on \", data.mdx.frontmatter.updated, \")\")), React.createElement(\"div\", {\n    className: post\n  }, children));\n};\nconst query = \"2624043382\";\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var date = \"lines-module--date--99f4f\";\nexport var post = \"lines-module--post--c3f31\";\nexport var previewContainer = \"lines-module--preview-container--8a704\";\nexport var threeColumn = \"lines-module--three-column--f948c\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ol","li","pre","code","_provideComponents","components","React","className","start","wrapper","MDXLayout","Post","_ref","data","children","Layout","date","mdx","frontmatter","updated","post","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}