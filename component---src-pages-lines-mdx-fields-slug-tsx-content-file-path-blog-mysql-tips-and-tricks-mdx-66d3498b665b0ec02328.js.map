{"version":3,"file":"component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-mysql-tips-and-tricks-mdx-66d3498b665b0ec02328.js","mappings":"kLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,2BAA4B,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iXAAkX,KAAMQ,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,2CAA4C,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,mBAAoBQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,8EAA+EM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,qBAAsBM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,SAAU,YAAa,KAAMM,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CACliCO,UAAW,gBACV,iDAAkD,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iCAAkCQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,uGAAwGM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,6BAA8BM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,WAAYM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,QAAS,iCAAkC,KAAMM,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CACzmBO,UAAW,gBACV,0WAA2W,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,iCAAkC,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,0CAA2C,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAC/mBO,UAAW,gBACV,gKAAiK,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,iCAAkC,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,sDAA2DQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,cAAe,0CAA2CM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,uBAAwBM,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,mCAAoC,KAAMM,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CACrsBO,UAAW,gBACV,gEAAiE,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,yCAA0C,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,0QAA2Q,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,4DAA6DQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,eAAgB,2EAA4E,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,kCAAmC,KAAMQ,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,iEAAkE,KAAMG,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,sEAAuE,KAAMG,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,2FAA4F,MAAO,KAAMG,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAC/xCO,UAAW,gBACV,mhBAAohB,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,qDAAsD,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,qFAAsFQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,UAAW,6EAA8E,KAAMM,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAC59BO,UAAW,gBACV,gPAAiP,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,kBAAmB,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,OAAQQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,kBAAmB,+EAAgF,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,gBAAiB,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,wEAAyE,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAC1wBO,UAAW,gBACV,yDAA0D,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,8FAA+F,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAChSO,UAAW,gBACV,kIAAmI,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,kBAAmB,wEAAyE,KAAMM,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CAClZO,UAAW,gBACV,wKAAyK,KAAMD,EAAAA,cAAoBZ,EAAYK,GAAI,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,qBAAsB,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,8GAA+G,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYM,KAAM,CACjhBO,UAAW,gBACV,+BAAgC,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,0MAA2MQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,KAAM,KACjV,CAKA,MAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBClCA,MAAMiB,EAAOC,IACX,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOL,EAAAA,cAAoBQ,EAAAA,EAAQ,KAAMR,EAAAA,cAAoB,IAAK,CAChEC,UAAWQ,EAAAA,IACVT,EAAAA,cAAoB,IAAK,KAAMM,EAAKI,IAAIC,YAAYF,MAAOT,EAAAA,cAAoB,KAAM,MAAOM,EAAKI,IAAIC,YAAYC,SAAWZ,EAAAA,cAAoB,IAAK,KAAM,eAAgBM,EAAKI,IAAIC,YAAYC,QAAS,MAAOZ,EAAAA,cAAoB,MAAO,CAC5OC,UAAWY,EAAAA,IACVN,KAIU,SAASO,EAAiB3B,GACvC,OAAOa,EAAAA,cAAoBI,EAAMjB,EAAOa,EAAAA,cAAoBe,EAAqB5B,GACnF,C,gFCfO,IAAIsB,EAAO,4BACPI,EAAO,2B,sEC+BX,MAAMG,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBlB,GAC/B,MAAMmB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfjB,EACFA,EAAWmB,GAGb,IAAIA,KAAsBnB,IAChC,CAACmB,EAAmBnB,GACzB,C","sources":["webpack://steebe.dev/./blog/mysql-tips-and-tricks.mdx","webpack://steebe.dev/./src/pages/lines/{mdx.fields__slug}.tsx","webpack://steebe.dev/./src/pages/lines/lines.module.css","webpack://steebe.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"MySQL - Helpful Tidbits\"), \"\\n\", React.createElement(_components.p, null, \"My experiences at Rev360 (RevolutionEHR) and Mercato brought about developing for back-ends that leverage MySQL for data storage solutions. All my other previous experiences were within the context of Oracle, DB2, and SQL Server database technologies, and I found myself constantly Googling to see how to do things better in MySQL. Below are some of those findings.\"), \"\\n\", React.createElement(_components.h2, null, \"Perform batch UPDATEs with a temp table\"), \"\\n\", React.createElement(_components.p, null, \"When performing \", React.createElement(_components.code, null, \"UPDATE\"), \"s against a table in bulk, MySQL is pretty non-performant when given a raw \", React.createElement(_components.code, null, \"UPDATE\"), \" statement with a \", React.createElement(_components.code, null, \"WHERE\"), \" clause:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"UPDATE A\\nSET foo = 'bar' WHERE id < 1000;\\n\")), \"\\n\", React.createElement(_components.p, null, \"The best way of handling bulk \", React.createElement(_components.code, null, \"UPDATE\"), \"s turns out to be establishing a temp table containing the values that encapsulate the data for the \", React.createElement(_components.code, null, \"UPDATE\"), \", and then performing the \", React.createElement(_components.code, null, \"UPDATE\"), \" with a \", React.createElement(_components.code, null, \"JOIN\"), \" against the temporary table.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"DROP TABLE IF EXISTS `tempFooValues`;\\n\\nCREATE TABLE `tempFooValues` (\\n`id` INT(11) UNSIGNED NOT NULL,\\n`foo` VARCHAR(255) NOT NULL,\\nPRIMARY KEY(`id`)\\n);\\n\\nINSERT INTO tempFooValues (id, foo) VALUES\\n(1, 'bar'),\\n(2, 'bar'),\\n...,\\n...,\\n(1000, 'bar');\\n\\nUPDATE A\\nINNER JOIN tempFooValues ON tempFooValues.id = A.id\\nSET\\nA.foo = tempFooValues.foo;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Leveraging CASE within a JOIN\"), \"\\n\", React.createElement(_components.p, null, \"This one is pretty self-explanatory...\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT * FROM A\\nJOIN B\\nON CASE\\nWHEN B.type IN (1, 3) AND B.a_id = A.id THEN 1\\nWHEN B.type IN (2) AND B.other_id = A.other_id THEN 1\\nELSE 0\\nEND = 1;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Converting Timezones from UTC\"), \"\\n\", React.createElement(_components.p, null, \"The arguments for the \\\"from\\\" and \\\"to\\\" timezones in \", React.createElement(_components.code, null, \"CONVERT_TZ\"), \" are the offsets from\\nUTC. Therefore, \", React.createElement(_components.code, null, \"+00:00\"), \" is itself UTC, and \", React.createElement(_components.code, null, \"-07:00\"), \" would equate to PT in the U.S.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT CONVERT_TZ(created, '+00:00','-07:00') FROM users;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Performing Maintenance on Huge Tables\"), \"\\n\", React.createElement(_components.p, null, \"Old faithful has been holding down the fort for 9 years. It's full of juicy data that's\\nboth important for reporting and critical for application business logic for end users.\\nIt is also missing a ton of helpful index values underneath the columns matter most.\"), \"\\n\", React.createElement(_components.p, null, \"Your reports won't report, and you know in your gut that \", React.createElement(_components.code, null, \"ALTER TABLE\"), \" in real time on\\nold faithful will take about 10,000 years to execute.\"), \"\\n\", React.createElement(_components.p, null, \"So, you perform the following:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Create a new table that contains the index values you require\"), \"\\n\", React.createElement(_components.li, null, \"Copy the data from old faithful into this clone table with indices\"), \"\\n\", React.createElement(_components.li, null, \"Rename (or drop) the original old faithful, and rename the clone to become old faithful\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"BEGIN;\\n\\nCREATE TABLE IF NOT EXISTS oldFaithfulWithIndices LIKE oldFaithful;\\n\\nALTER TABLE oldFaithfulWithIndices\\n    ADD INDEX `account_id_index`(`account_id`),\\n    ADD INDEX `email_address_index`(`email_address`),\\n    ADD INDEX `created_datetime_index`(`created_datetime`),\\n    ADD INDEX `updated_datetime_index`(`updated_datetime`);\\n\\nINSERT INTO oldFaithfulWithIndices SELECT * FROM oldFaithful;\\n\\nRENAME TABLE oldFaithful TO oldFaithful_archive;\\n\\nRENAME TABLE oldFaithfulWithIndices TO oldFaithful;\\n\\nCOMMIT;\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Adding composite unique indexes to existing table\"), \"\\n\", React.createElement(_components.p, null, \"When working with a table that already contains data that would violate a desired \", React.createElement(_components.code, null, \"unique\"), \" index\\nyou wish to apply to a table, it's important you scrub the dupes.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"DELETE FROM my_table\\nWHERE id NOT IN (\\n    SELECT MIN(id)\\n    FROM my_table\\n    GROUP BY col_1, col_2\\n)\\nAND (col_1, col_2) in (\\n    SELECT col_1, col_2\\n    FROM my_table\\n    GROUP BY col_1, col_2\\n    HAVING count(*) > 1\\n);\\n\")), \"\\n\", React.createElement(_components.h2, null, \"GROUP_CONCAT()\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"GROUP_CONCAT()\"), \" function is used to aggregate the results of a column into a single field.\"), \"\\n\", React.createElement(_components.p, null, \"Use cases...\"), \"\\n\", React.createElement(_components.p, null, \"Concatenating all single-column results into a single field results:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT GROUP_CONCAT(email_address) FROM customer; \\n\")), \"\\n\", React.createElement(_components.p, null, \"Grouping all results of a column into a single field relative to a shared group identifier\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT customer, GROUP_CONCAT(order.id)\\nFROM customer\\nJOIN order ON customer.id = order.customer_id\\nGROUP BY customer.id\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"GROUP_CONCAT()\"), \" allows for customizability of the structure of the aggregated data:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT customer, GROUP_CONCAT(order.id ORDER BY order.id DESC SEPARATOR '| ')\\nFROM customer\\nJOIN order ON customer.id = order.customer_id\\nGROUP BY customer.id\\n\")), \"\\n\", React.createElement(_components.h2, null, React.createElement(_components.code, null, \"LAST_INSERT_ID()\")), \"\\n\", React.createElement(_components.p, null, \"For any given session in the database engine, the session user can inspect their latest insertion ID with:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT LAST_INSERT_ID();\\n\")), \"\\n\", React.createElement(_components.p, null, \"This function operates on a per-connection basis, meaning that when the DB session user terminates their\\ncurrent connection, their next session will yield a different result. A fresh session yields \", React.createElement(_components.code, null, \"0\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/steebe.github.io/steebe.github.io/blog/mysql-tips-and-tricks.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport {post, date} from \"./lines.module.css\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"p\", {\n    className: date\n  }, React.createElement(\"i\", null, data.mdx.frontmatter.date), React.createElement(\"br\", null), data.mdx.frontmatter.updated && React.createElement(\"i\", null, \"(Updated on \", data.mdx.frontmatter.updated, \")\")), React.createElement(\"div\", {\n    className: post\n  }, children));\n};\nconst query = \"2624043382\";\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var date = \"lines-module--date--99f4f\";\nexport var post = \"lines-module--post--c3f31\";\nexport var previewContainer = \"lines-module--preview-container--8a704\";\nexport var threeColumn = \"lines-module--three-column--f948c\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","code","pre","ul","li","_provideComponents","components","React","className","wrapper","MDXLayout","Post","_ref","data","children","Layout","date","mdx","frontmatter","updated","post","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}