{"version":3,"file":"component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-redshift-opinion-mdx-88c0a1ee31bb0d106fc2.js","mappings":"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","sources":["webpack://steebe.dev/./src/pages/lines/lines.module.css","webpack://steebe.dev/./blog/redshift-opinion.mdx","webpack://steebe.dev/./src/pages/lines/{mdx.fields__slug}.tsx","webpack://steebe.dev/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var date = \"lines-module--date--99f4f\";\nexport var post = \"lines-module--post--c3f31\";\nexport var previewContainer = \"lines-module--preview-container--8a704\";\nexport var threeColumn = \"lines-module--three-column--f948c\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    em: \"em\",\n    strong: \"strong\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Redshift: Body Hiding as a Service\"), \"\\n\", React.createElement(_components.p, null, \"When I started writing this post, it was to be a single, helpful guide for myself. Before long, it turned into a pretty\\ngnarly rant about Redshift as a product, rather than a truly marvelous technical solution. The helpful guide still does\\nexist, for what it's worth. Check it out as a \", React.createElement(_components.a, {\n    href: \"./redshift-notes\"\n  }, \"sibling post\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"In full disclosure: I do work with an organization that has adopted Redshift as an internal tool for various reporting\\npurposes, as of mid-to-late 2021. In hindsight, the decision to bring it in as a tool likely had little to do with\\nits prowess and capabilities, and more to do with certain personnel confusing the term \\\"growth\\\" for \\\"infinite amounts of\\ncash to blow\\\".\"), \"\\n\", React.createElement(_components.p, null, \"We leveraged I/O as follows:\"), \"\\n\", React.createElement(\"table\", {\n    className: \"three-column\",\n    border: 1,\n    frame: \"void\",\n    rules: \"rows\"\n  }, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Frequency\"), React.createElement(\"th\", null, \"Operation\"), React.createElement(\"th\", null, \"Mechanism\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Once\"), React.createElement(\"td\", null, React.createElement(\"b\", null, \"WRITE\"), \" all tables from external, primary datasource(s)\"), React.createElement(\"td\", null, \"AWS DMS + Vendor integration\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Ad-hoc\"), React.createElement(\"td\", null, React.createElement(\"b\", null, \"WRITE\"), \" custom views to cache aggregate data used solely for reporting purposes\"), React.createElement(\"td\", null, \"AWS Redshift Console + DBMS Tools\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Ad-hoc\"), React.createElement(\"td\", null, React.createElement(\"b\", null, \"WRITE\"), \" DDL changes that have occurred on the primary datasource(s)\"), React.createElement(\"td\", null, \"AWS DMS\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Ad-hoc\"), React.createElement(\"td\", null, React.createElement(\"b\", null, \"READ\"), \" from various tables and views\"), React.createElement(\"td\", null, \"DBMS Tools + other query tools\")), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Regularly\"), React.createElement(\"td\", null, React.createElement(\"b\", null, \"READ\"), \" from various tables and views\"), React.createElement(\"td\", null, \"Scheduled, and systemic processes\"))), \"\\n\", React.createElement(_components.p, null, \"Those \", React.createElement(_components.code, null, \"WRITE\"), \" operations are inevitable, regardless of the destination data source, sure. But they specifically require\\ngoing through AWS managed toolchains, either S3 for a \", React.createElement(_components.code, null, \"COPY\"), \" or via AWS Database Migration Service for table mapping\\nor other ETL jobs.\"), \"\\n\", React.createElement(_components.p, null, \"Allow me to pause my uppity browbeating for a moment. I personally find the tooling behind Redshift to be badass. It:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"is run on its own custom flavor of SQL\"), \"\\n\", React.createElement(_components.li, null, \"can [allegedly] act as a decent \\\"big-data\\\" solution, offering scaling up to PB of data quickly\"), \"\\n\", React.createElement(_components.li, null, \"comes with training wheels:\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"a phenomenal documentation layer\"), \"\\n\", React.createElement(_components.li, null, \"a web-based query console\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Being badass never lets one off the hook, though. I'm sure you could ask Bezos.\"), \"\\n\", React.createElement(_components.h2, null, \"PaaS vs. DBaaS\"), \"\\n\", React.createElement(_components.p, null, \"Look at those \", React.createElement(_components.code, null, \"WRITE\"), \"s again. None of them are from an SDK. None of them are from a code base.\\nIn fact, it seems that (obligatory: \", React.createElement(_components.em, null, \"at the time of writing this\"), \") Redshift really still doesn't cater to\\ndevelopment teams as a primary data source for server applications.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Its SDKs cater to managing Redshift clusters and its assets, rather than invoking queries\"), \"\\n\", React.createElement(_components.li, null, \"The official Data API documentation includes instructions on how to map result sets by hand to JDBC objects\"), \"\\n\", React.createElement(_components.li, null, \"There is no official supported ORM for Redshift\"), \"\\n\", React.createElement(_components.li, null, \"The client-side SDK seems to be exactly what it would have taken to construct the Amazon internal cluster management\\nUI within the AWS management console\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I'm not trying to build a case that Redshift was at all designed for the purpose of acting as a server application's\\nprimary datasource. It's important to acknowledge that it's a profoundly accessible data storage solution with seemingly\\ngreat potential for scale, and capability of catering to various use-cases. Oh, also, by accessible I mean, \\\"widely\\nadoptable for those with a credit card burning a hole in their pocket.\\\"\"), \"\\n\", React.createElement(_components.p, null, \"However, I think it seems obvious as to \", React.createElement(_components.em, null, \"why\"), \" this purpose was not its goal in the first place. In fact, recalling the\\nI/O operations I expressed above, it's truly no mystery as to why there are no official Amazon-led connectors/SDKs/ORM\\nlibraries that bind any particular language to Redshift capabilities:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.em, null, \"If the programmatic capabilities a developer has with a platform are to create and manage new infrastructure, then\\nthe platform remains a platform to be managed, rather than a tool to be leveraged.\"))), \"\\n\", React.createElement(_components.p, null, \"It might be in Amazon's best interest, strictly from a margins and maintenance cost perspective, that Redshift remain a\\npure PaaS product. Unfortunately, when developers (and not data scientists) are the ones responsible for the operations\\ninvolving Redshift I/O, it becomes painfully clear that it's simply a SQL database with a bunch of added cost.\"), \"\\n\", React.createElement(_components.h2, null, \"DBaaS...\"), \"\\n\", React.createElement(_components.p, null, \"Amazon's own Relational Database Service (RDS) contrasts with Redshift in ways that really helped me arrive to my\\nconclusion.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"RDS virtual instances have smaller downtime on average over Redshift clusters during re-scaling/elastic resizing\"), \"\\n\", React.createElement(_components.li, null, \"RDS is cheaper, on average, per use case (\", React.createElement(_components.em, null, \"at the time of writing\"), \")\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"An RDS \", React.createElement(_components.code, null, \"db.t3.large\"), \" (1 core, 2vCPUs, 8GB RAM) is $0.136/hour, vs. the minimal cluster charge of $0.25/hour on Redshift\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Allegedly, Redshift's query optimizer, famous for making its \\\"big data\\\" capabilities a reality, make it slower on average\\nthan RDS for queries under the several million record count\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Redshift was marketed well, and perhaps even had the best of intentions to disrupt the market of big data tools. It\\ncertainly smells like a big custom SQL database cloud with purposeful dependencies that hike the cost of using it\\neffectively. It seems that it is most effectively serving entities who have so much data to play with that dumping it\\nin a central place to stream outwards in creative ways. I hope their pockets are deep. So does Amazon, I'm sure.\"), \"\\n\", React.createElement(_components.h2, null, \"References\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://docs.aws.amazon.com/redshift/latest/dg/r_WF_RANK.html\"\n  }, \"Redshift Rank\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/1IliGkQIwR0h3EjXoA9VysJm9QIqdBKGN/view?usp=share_link\"\n  }, \"Redshift Data API\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/18UDxpeWf7nJSs01qHaGm0-MW8PMEVTdg/view?usp=share_link\"\n  }, \"Redshift SDK Examples\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/1nG9r9bQvD8NN_m22jpk2J2KoxY6ggKej/view?usp=share_link\"\n  }, \"Redshift Java SDK Overview\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/1ZlVAF3TvrXLSb-V4jGkc89RJCfXmwSVO/view?usp=share_link\"\n  }, \"Redshift Python SDK Overview\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/1LwYngIharMybl_PHUEQzvyvsT3YGP3oa/view?usp=share_link\"\n  }, \"Redshift Client-side SDK\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://drive.google.com/file/d/19cm58920poSyw_Z3QwvmPKG57bvlqhwa/view?usp=share_link\"\n  }, \"RDS vs. Redshift Analysis\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"This is from \", React.createElement(_components.a, {\n    href: \"https://hevodata.com/\"\n  }, \"Hevo\"), \", an ETL and \\\"data pipeline\\\" platform. Not necessarily a competitor to, and\\nlists Redshift as a source they work with out of the box. Take that as you will...\"), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/steebe.github.io/steebe.github.io/blog/redshift-opinion.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport {post, date} from \"./lines.module.css\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"p\", {\n    className: date\n  }, React.createElement(\"i\", null, data.mdx.frontmatter.date), React.createElement(\"br\", null), data.mdx.frontmatter.updated && React.createElement(\"i\", null, \"(Updated on \", data.mdx.frontmatter.updated, \")\")), React.createElement(\"div\", {\n    className: post\n  }, children));\n};\nconst query = \"2624043382\";\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["date","post","_createMdxContent","props","_components","Object","assign","h1","p","a","code","ul","li","h2","em","strong","ol","_provideComponents","components","React","href","className","border","frame","rules","wrapper","MDXLayout","Post","_ref","data","children","Layout","mdx","frontmatter","updated","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}