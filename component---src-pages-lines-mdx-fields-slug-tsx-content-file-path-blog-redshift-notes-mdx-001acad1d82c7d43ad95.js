"use strict";(self.webpackChunksteebe_dev=self.webpackChunksteebe_dev||[]).push([[662],{5999:function(e,t,n){n.d(t,{bE:function(){return l},p6:function(){return r}});var r="lines-module--date--99f4f",l="lines-module--post--c3f31"},8453:function(e,t,n){n.d(t,{RP:function(){return a}});var r=n(6540);const l=r.createContext({});function a(e){const t=r.useContext(l);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}},8477:function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var r=n(8453),l=n(6540);function a(e){const t=Object.assign({p:"p",a:"a",hr:"hr",h2:"h2",h3:"h3",code:"code",strong:"strong",pre:"pre",em:"em",h4:"h4"},(0,r.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"Below are helpful commands I don't want to forget for Redshift admin and use. Those interested in a small torching\nof Redshift as a product are welcome to read the ",l.createElement(t.a,{href:"./redshift-opinion"},"sibling post"),"."),"\n",l.createElement(t.hr),"\n",l.createElement(t.h2,null,"Querying"),"\n",l.createElement(t.h3,null,'A Distinct "',l.createElement(t.code,null,"DISTINCT"),'"'),"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"PostgreSQL")," users might be familiar with the ability to use ",l.createElement(t.code,null,"DISTINCT")," as an expression evaluator, rather\nthan a clause, to reduce the result set down to records that only include the value evaluated by the\nexpression."),"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"MySQL")," users might be used to leveraging ",l.createElement(t.code,null,"GROUP BY")," in a different way than normal\nto do the same."),"\n",l.createElement(t.p,null,"I.E: if I have a table, ",l.createElement(t.code,null,"orders"),":"),"\n",l.createElement("table",{border:1,frame:"outside"},l.createElement("tr",null,l.createElement("th",null,"id"),l.createElement("th",null,"customerId")),l.createElement("tr",null,l.createElement("td",null,"1"),l.createElement("td",null,"1")),l.createElement("tr",null,l.createElement("td",null,"2"),l.createElement("td",null,"1")),l.createElement("tr",null,l.createElement("td",null,"3"),l.createElement("td",null,"1"))),"\n",l.createElement(t.p,null,"Our first customer was keeping the lights on, and proved that the ",l.createElement(t.code,null,"orders")," table has a many:one\nrelationship with the ",l.createElement(t.code,null,"customers")," table."),"\n",l.createElement(t.p,null,"Suppose we need to pull the latest order for each customer, in a world where there is not just\na sole customer placing orders. Additionally, the context of the report involves many other fields are being\naggregated across dozens of other tables. ",l.createElement(t.code,null,"LIMIT 1")," is not coming to the rescue."),"\n",l.createElement(t.p,null,"Postgres allows for:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"SELECT\n    DISTINCT ON(customerId) customerId,\n    id\nFROM orders\nORDER BY customerId, id DESC;\n")),"\n",l.createElement(t.p,null,"Okay, cool. Weird, but cool. The developer specifies they ",l.createElement(t.em,null,"only")," want unique ",l.createElement(t.code,null,"customerId")," values\nin their results, but want the respective order information along with it. Postgres constructs\ngroups based on the argument provided to ",l.createElement(t.code,null,"DISTINCT ON"),", then omits any records that break the unique\nvalue specified. The ",l.createElement(t.code,null,"ORDER BY")," gives the developer control over precedence on which distinct records\nto honor."),"\n",l.createElement(t.p,null,"MySQL perhaps helps visualize this better, literally making the developer create the groups themselves:\n",l.createElement(t.code,null,"ORDER BY"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"WITH disctinct_customer_id_orders AS (\n    SELECT\n        id\n    FROM orders\n    GROUP BY customerId\n)\nSELECT * FROM distinct_customer_id_orders ORDER BY id DESC;\n")),"\n",l.createElement(t.p,null,"It's still not perfect, either, because the ",l.createElement(t.code,null,"ORDER BY")," should happen in the first query, but hey, MySQL tries."),"\n",l.createElement(t.h4,null,"Redshift does neither..."),"\n",l.createElement(t.p,null,"...yet I don't hate how Redshift achieves the same outcome, strictly from the developer\nexperience side of things:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"SELECT\n    *\nFROM (\n    SELECT\n        id,\n        customerId,\n        RANK() OVER (PARTITION BY customerId ORDER BY id DESC) AS customer_id_rank\n    FROM orders\n) as ranked_orders\nWHERE ranked_orders.customer_id_rank = 1;\n")),"\n",l.createElement(t.p,null,"Where Redshift could have continued reinventing an already finished, rehashed,\nre-spoked wheel of relational-algebra powered query engines, it instead took the modest route."),"\n",l.createElement(t.p,null,"The developer is welcome to rewrite ",l.createElement(t.code,null,"GROUP BY")," on Amazon's behalf. Also, the developer gets a bonus\ncolumn in their toolkit to play with. It's okay that the result set grew though, because it's powered\nby a warehouse meant for Big Data!"),"\n",l.createElement(t.h2,null,"Administering"),"\n",l.createElement(t.h3,null,"Groups & Users"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"-- Create groups\nCREATE GROUP MY_GROUP [WITH USER (user1, user2,...)];\n\n-- View all user groups (as cluster admin)\nSELECT * from PG_GROUP;\n\n-- View all users in a group\nSELECT usename FROM pg_user, pg_group\nWHERE pg_user.usesysid = ANY(pg_group.grolist)\n  AND pg_group.groname = '<group-name>';\n\n-- Apply to entire schema\nGRANT ALL ON SCHEMA my_schema TO GROUP my_group;\n\n-- Apply to specific tables\nGRANT SELECT ON TABLE my_table TO my_user;\n\n-- Apply read-only access to specific (or all) tables in a single schema\nGRANT SELECT ON ALL TABLES IN SCHEMA my_schema TO my_user;\n\n-- Create user\nCREATE USER my_user PASSWORD '<pass-string>';\n\n-- Create user under specific group\nCREATE USER my_user IN GROUP my_group PASSWORD 'pass';\n\n-- Alter existing user\nALTER USER my_user PASSWORD 'new-pass';\n")),"\n",l.createElement(t.h3,null,"Cluster Metadata"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"-- View tables within a Schema\nselect distinct tablename from pg_table_def where schemaname = '<schema-name>';\n\n-- View all schemas in a cluster\nselect * from pg_namespace;\n\n-- View connection activity within a cluster\nselect * from stl_connection_log\nwhere recordtime > '2021-02-07 00:00:00' and username in ('user1', 'user2')\norder by recordtime DESC;\n")))}var s=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.RP)(),e.components);return t?l.createElement(t,e,l.createElement(a,e)):a(e)},o=n(1633),c=n(5999);const u=e=>{let{data:t,children:n}=e;return l.createElement(o.A,null,l.createElement("p",{className:c.p6},l.createElement("i",null,t.mdx.frontmatter.date),l.createElement("br",null),t.mdx.frontmatter.updated&&l.createElement("i",null,"(Updated on ",t.mdx.frontmatter.updated,")")),l.createElement("div",{className:c.bE},n))};function i(e){return l.createElement(u,e,l.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-pages-lines-mdx-fields-slug-tsx-content-file-path-blog-redshift-notes-mdx-001acad1d82c7d43ad95.js.map